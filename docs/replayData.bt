//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: replayData
//   Authors: Taloth Saldono
//   Version: 0.1
//   Purpose: Decode AoE4 Replay Data Files
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

//------------------------------------------------
typedef struct {
    uint32 length;
    if (length) {
        char   value[length];
    }
} String <read=formatString, open=suppress>;

string formatStringShort(String &val) {
    if (val.length && exists(val.value)) {
        return Str("%s", val.value);
    } else {
        return "";
    }
};

string formatString(String &val) {
    if (val.length && exists(val.value)) {
        return Str("\"%s\"", val.value);
    } else {
        return "\"\"";
    }
};

typedef struct {
    uint32 length;
    if (length) {
        wchar_t value[length];
    }
} UString <read=formatUString, open=suppress>;

string formatUStringShort(UString &val) {
    if (val.length && exists(val.value)) {
        return Str("%s", val.value);
    } else {
        return "";
    }
};

string formatUString(UString &val) {
    if (val.length && exists(val.value)) {
        return Str("\"%s\"", val.value);
    } else {
        return "\"\"";
    }
};

string formatPlayerColor(ubyte color_id)
{
    // Order based on selection drop down.
    // 0=Blue, 1=Red, 2=Yellow, 3=Green, 4=Teal, 5=Purple, 6=Orange, 7=Pink
    string color_name;
    switch(color_id)
    {
        case 0  : color_name="Blue"; break;
        case 1  : color_name="Red"; break;
        case 2  : color_name="Yellow"; break;
        case 3  : color_name="Green"; break;
        case 4  : color_name="Teal"; break;
        case 5  : color_name="Purple"; break;
        case 6  : color_name="Orange"; break;
        case 7  : color_name="Pink"; break;
        default : color_name="Unknown";
    }
    string s;
    SPrintf(s, "%d - %s", color_id, color_name);
    return s;
}

//------------------------------------------------

void ExpectVersion(string name, int read_version, int supported_version) {
    if (read_version != supported_version) {
        Printf("%xh: ChunkyFileHeader template supports version %u, read version %u\r\n", FTell(), supported_version, read_version);
    }
}

//------------------------------------------------

typedef struct {
    String name;
    float  value;
} OptionKeyPair <name=this.name.value, read=this.value>;

typedef struct {
    String sectionName;
    uint32 length;
    if (length) {
        OptionKeyPair items[length] <optimize=false>;
    }
} Section;

typedef struct {
    uint32 length;
    if (length) {
        Section sections[length] <optimize=false>;
    }
} SectionList;

struct ExtraPlayerData {
    // Following only for first player??
    uint32 unknown1[17];
    ubyte unknown2;
    String unknown3Attributes;
    uint32 unknown4[11];
};

struct DataGameSetupPlayer {
    ubyte  isHuman; // 1=human, 0=AI
    UString playerName;
    uint32 team; // Team
    uint32 playerId; // e.g. 1,7,0,3,5 Unique. this+1000 = DataPLAS.playerId
    ubyte  unknown7;
    String  civ;

    ushort unknown8; // Always 0
    ushort unknown9; // Always 34
    uint32 unknown10Count; // 127=human, 1=AI ?
    String unknown11;
    float  unknown12;

    uint32 unknown13;
    uint32 unknown14[5]; // Always 0xFFFFFFFF ?
    uint32 unknown15; // e.g. 0,1,2,3,4    Always player index?

    // Different for each human. Local 1 human vs 1 AI, both players have same value.
    // Starts at 1, not 0.
    // Matches ReplayBlock.hostComputerId
    uint32 hostComputerId; // e.g. 1,3,6,2,4
    uint32 unknown17;

    uint32 unknown18; // 'kin'
    ubyte  unknown19[5]; // Seen: 0=human, 255=AI

    UString steamId;

    uint32 unknown20;
    uint32 unknown21;
    ushort unknown22a;
    ushort unknown22b;

    ubyte  unknown23a1;
    ubyte  unknown23a2;

    ubyte  color <read=formatPlayerColor>;

    ubyte  unknown23a[15];
    ubyte  unknown23b;
    ubyte  unknown23c[3];

    if (unknown23b > 0) { // AI players have 0, and do not have this data.
        ubyte  unknown23d[69];
        String unknown24Atttributes;
        uint32 unknown26;
        uint32 unknown27;
        uint32 unknown28;
        uint32 unknown29;
        uint32 unknown30; // Always 0xFFFFFFFF ?
        uint32 unknown31; // Always 0xFFFFFFFF ?
        uint32 unknown32;
        uint32 unknown33;
        uint32 unknown34;
        uint32 unknown35;
        uint32 unknown36;
    }

    if (unknown23b > 1) { // Some humans have this set to 2, and have extra data.
        ExtraPlayerData extra;
    }
};

struct DataGameSetupModPack {
    uint32 unknown1;
    ubyte modVersion[32];
    String unknown3;
};

struct DataGameSetup {
    uint32 unknown1;
    uint32 unknown2;
    ushort unknown3;
    uint32 playerCount;
    if (playerCount)
        DataGameSetupPlayer players[playerCount] <optimize=false>;

    uint32 unknown4;
    uint32 unknown5;
    uint32 unknown6;
    /*String unknown7;
    uint32 unknown8;
    uint32 unknown9;
    uint32 unknown10;
    uint32 unknown11;
    uint32 unknown12;
    uint32 unknown13;
    uint32 unknown14;
    SectionList options;

    uint32 unknown15;
    uint32 unknown16;
    uint32 unknown17;
    String unknown18;
    uint32 unknown19;
    uint32 unknown20;
    ushort unknown21;
    int32  modPackCount;
    if (modPackCount)
    {
        DataGameSetupModPack modPacks[modPackCount];
    }
    ushort unknown22c;
    String mapSize;
    uint32 unknown23;
    ubyte  unknown24;
    String mapName;
    uint32 unknown25;
    ubyte  unknown26;
    String biome;
    uint32 unknown27;
    uint32 unknown28;
    uint32 mapSeed;
    uint32 unknown30;
    String minimap;
    uint32 unknown31;*/

};

//------------------------------------------------

struct DataPLAS {
    uint32 count;
    if (count)
        uint32 playerId[count];
};

//------------------------------------------------

struct DataGRIF {
    uint32 count;
    if (count)
        uint32 unknown1[count];
};

struct DataSDSC {
    uint32 count;
    if (count)
        uint32 unknown1[count];
};

//------------------------------------------------

local int32 globalGameTick;

struct CommandFlag {
  ubyte flags : 7;

  // Is 1 if shift is held. If unit is already idle, can happen immediately.
  ubyte queued : 1;
};

enum <ubyte> CommandAttributeType {
    Size        = 1,
    Position    = 2,
    BuildingId  = 3,
    Unknown4    = 4,
    Unknown5    = 5,
    Unknown32   = 32,   // Probably UnitID
    Unknown70   = 70,
    Unknown95   = 95
};

struct PosData {
    int16 unknown1;
    int32 posA;
    int32 posB;
    int32 posC;
    ubyte rotData[10] <fgcolor=0xff00ff>;
};

union PosUnion {
    PosData pos;
    ubyte posData[24];
};

typedef struct {
    CommandAttributeType attributeType;

    switch (attributeType)
    {
        case 0:
            ubyte unknown1;
            ubyte unknown2;
            break;
        case 1:
            ubyte size <comment="Size of the rest of the next Attribute(s?).">;
            break;
        case 2:
            float x;
            float y;
            float z;
            break;
        case 3:
            ubyte buildingId[3];
            break;
        case 4:
            uint32 entityId;
            //ubyte  unknown5;
            break;
        case 16:
            uint16 unknown1; // 0
            uint16 unknown6;    // 2816
            byte unknown7;  // 13 = pos?
            //byte unknown8;
    
            //if (unknown7 == 5)
            //{
            //    int  entityId   <comment="This is an entityId like 50007, but purpose unknown">;
            //}
            //else if (unknown7 == 13)
            //{
            //    float x;
            //    float y;
            //    float z;
            //}
            break;
        case 32:
            ubyte unknown1;
            ubyte unknown2;
            ubyte unknown3;
            break;
        case 64:
            uint16 unknown1;
            uint16 unknown2     <comment="This appears to be the client-side tick, about gameTick - 2">;
            // Camera movement, but I can't see any coordinates. It could be camera lens location rather than ground location, or maybe a camera matrix.
            // camera matrix requires 12 floats for translation and rotation, which would need 48 bytes. But we have 25 bytes tops. So that ain't it.
            PosUnion pos;
            break;
        case 66:
            ubyte unknown1[10]; // To be disected later
            break;
        case 67:
            ubyte unknown1[19]; // To be disected later
            break;
        case 68:
            ubyte unknown1[23]; // To be disected later
            break;
        case 69:
            // To be disected later
            break;
        case 70:
            ubyte unknown1;
            ubyte unknown2;
            ubyte unknown3;
            break;
        case 71:
            // To be disected later
            // Seen 35 bytes in age4 6.0.878.0
            break;
        case 72:
             // To be disected later
            break;
        case 73:
            // To be disected later
            // Seen 43 bytes in age4 6.0.878.0
            break;
        case 74:
            // To be disected later
            break;
        case 75:
            // To be disected later
            break;
        case 76:
            // To be disected later
            break;
        case 77:
            // To be disected later
            break;
        case 79:
            // To be disected later
            break;
        case 95:
            break;
        default:
            ubyte unknown[123023];
            break;
    }
} ReplayCommandAttribute;

enum <ubyte> CommandType {
    UnknownCommand3     = 3,   // Probably build/queue unit (vil)
    UnknownCommand5     = 5,   // Rare
    UnknownCommand7     = 7,   // Rare
    UnknownCommand12    = 12,  // Or this oen build/queue unit (vil)
    UnknownCommand14    = 14,  // Rare
    UnknownCommand16    = 16,  // Rare
    UnknownCommand20    = 20,  // Rare
    UnknownCommand22    = 22,  // Rare
    UnknownCommand56    = 56,  // Rare
    MoveCommand         = 62,
    CancelCommand       = 63,
    BuildCommand        = 65,
    UnknownCommand66    = 66,
    UnknownCommand67    = 67,  // Maybe queue vil?
    UnknownCommand71    = 71,
    UnknownCommand72    = 72,  // Has PreCommand + PostCommand; Can come in batches like: PreCommand, 72, 72, 72, 72, PostCommand
    UnknownCommand73    = 73,
    UnknownCommand105   = 105, // Maybe move vil to gather sheep/kill sheep
    UnknownCommand108   = 108,
    UnknownCommand114   = 114, // Has PreCommand + PostCommand
    UnknownCommand123   = 123, // Build Command? Lumber camp.
    UnknownCommand130   = 130,
    UnknownCommand143   = 143, // This appears to be the 'Surrender' command, but could also be a more global command with Surrender as subtype.
    PreCommand          = 146, // Triggered Before Command
    PostCommand         = 148, // Triggered After Command 
    PeriodicCommand1    = 152, // Probably Camera
    PeriodicCommand2    = 153, // Maybe Camera. Maybe heartbeat.
    UnknownCommand154   = 154,
};

struct UnknownCommand3Data {
    ReplayCommandAttribute attr; // 16
    byte unknown8;
    int  pbgid; // What is a pbgid?
    int  playerId3;
    byte unknown9;
};

struct UnknownCommand7Data {
    ReplayCommandAttribute attr1; // 16
    ReplayCommandAttribute attr2; // 1 or 2
    if (exists(attr2.size) && (attr2.size > 0)) {
      ReplayCommandAttribute attr3; // 2
    }
};

struct UnknownCommand12Data {
    local ubyte peek = ReadByte();
    ReplayCommandAttribute attr;
    if (peek == 16 || peek == 66)
        ReplayCommandAttribute attr; // 4
};

typedef struct {
    // These 3 bytes for unitId are in normal order
    // 63,0,0 == 63
    ubyte unitId[3];
    ubyte unitSeparator32;
} UnitIdWithTrailing32 <read=formatUnitId>;

uint32 GetUnitId(UnitIdWithTrailing32 &uid) {
    return (uid.unitId[0]) + ((uint32)uid.unitId[1] << 8) + ((uint32)uid.unitId[2] << 16);
}

string formatUnitId(UnitIdWithTrailing32 &uid) {
    return Str("Unit %u", GetUnitId(uid));
};

uint32 GetUnitIdReversed(ubyte uid[3]) {
    return (uid[2]) + ((uint32)uid[1] << 8) + ((uint32)uid[1] << 16);
}

typedef struct {
    // This could be a ReplayCommandAttribute

    ubyte marker;
    local int unit_count;
    if (marker == 32) {
      unit_count = 1;
      // One unit selected

      // These 3 bytes for unitId are in reverse order (compared to multiple units selected).
      // 0,0,63 == 63
      ubyte unitIdReversed[3];
    } else if (marker > 64) {
      // Multiple units selected.
      // Have observed this pattern hold for as many as 49 units (marker=113).

      // TODO: what happens if more than 63 units selected??
      unit_count = marker - 64;

      UnitIdWithTrailing32 unitIds[unit_count];
    }
} SelectedSetOfUnits <read=formatSelectedSetOfUnits>;

string formatSelectedSetOfUnits(SelectedSetOfUnits& units) {
    if (units.unit_count == 1) {
        return Str("Units: {%u}", GetUnitIdReversed(units.unitIdReversed));
    }
    else if (units.unit_count > 1) {
        local string r = "";
        local int i;
        for (i = 0; i < units.unit_count; i++) {
            if (i != 0) {
              r = Str("%s, ", r);
            }
            r = Str("%s%u", r, GetUnitId(units.unitIds[i]));
        }
        return Str("Units: {%s}", r);
    }
}

struct MoveCommandData {
    //ReplayCommandAttribute attr; // 32 
    SelectedSetOfUnits units;

    //ReplayCommandAttribute attr; // 1 = size (val=13 if next is 2; val=5 if next is 3)
    byte   unknown8; // Always 1
    byte   unknown9; // size of the bytes after this point

    //ReplayCommandAttribute attr; // 2 = pos OR 3 = buildingId
    byte   unknown10; // Always 2 or 3

    if (unknown10 == 2) {
        float x;
        float y;
        float z;
    } else if (unknown10 == 3) {
        ubyte unitId[3]; // Maybe
        ubyte unknown11;
    } else {
        // TODO print something, investigate if this happens
    }

    // note that unknown5 can be 32, designating a unit id coming after.  or 66, which is something else and then the 32:id pair comes later
    // So unknown5 is part of the commandSubData
};

struct CancelCommandData {
    SelectedSetOfUnits units;
};

struct BuildCommandData {
    SelectedSetOfUnits units;
};

struct UnknownCommand71Data {
    SelectedSetOfUnits units;
};

struct UnknownCommand72Data {
    SelectedSetOfUnits units;
};

struct UnknownCommand73Data {
    SelectedSetOfUnits units;
};

struct UnknownCommand114Data {
    SelectedSetOfUnits units;
};

struct UnknownCommand123Data {
    ubyte unknown5[3];
    uint16 unknown6a;
    uint16 unknown6b;
    uint32 pbgid;
    // Note: x goes from South West to North East.
    //       y goes from South East to North West.
    float x1a;
    float z1a;
    float y1a;
    float x1b;
    float z1b;
    float y1b;
    float x1c;
    float z2c;
    float y3;
    // maybe float z; after
    // 164, -148
    ubyte unknown8[7];
    ubyte unitCount;
    if (unitCount)
        uint32 unitId[unitCount];
};

struct PreCommandData {
    ubyte unknown5[5];
};

struct PostCommandData {
    ubyte unknown5;
    ubyte unknown6;
    ubyte unknown7;
    ubyte unknown8;
};

struct PeriodicCommand1Data {
    ReplayCommandAttribute attr; // 64
    //ubyte unknown5[3];
    // Camera movement, but I can't see any coordinates. It could be camera lens location rather than ground location, or maybe a camera matrix.
    // camera matrix requires 12 floats for translation and rotation, which would need 48 bytes. But we have 25 bytes tops. So that ain't it.
    //PosUnion pos;
};

struct ClientSideTick {
    // Observed from each client.
    //  Edit: not always only on cmd152/153
    uint16 tick   <comment="This appears to be the client-side tick. Lags gameTick by approx (2 or 3 or 4).">;
};

struct PeriodicCommand2Data {
    ubyte unknown5[3];

    ClientSideTick clientTick;
};

struct UnknownCommand154Data {
    ubyte unknown5[3];

    ClientSideTick clientTick;
};

typedef struct {
    int16       size;
    CommandType commandType;
    CommandFlag commandFlags; // 0x80 probably 'queued' (yeah, looks very much like 'shift' commands)

    // Always 0 if playerId is 0.
    // PreCommand and PostCommand are counted as commands, their value here will be non-zero.
    // The expected value is 0 or N=1, and N is incremented each time a non-zero value is seen.
    // e.g. 0, 0, 1, 2, 0, 3, 0, 4, 0, 0, 5, 6, 7
    uint16      playerCommandCount <comment="Each player has their own command counter.">;

    ubyte       unknown1[6];

    ubyte  unknown2[8];
    uint32 playerId; // Matches DataPLAS.playerId of the player issuing the command. Is 0 for Non-player events.

    switch (commandType) {
      case UnknownCommand3:
        UnknownCommand3Data data;
        break;
      case UnknownCommand5:
        break;
      case UnknownCommand7:
        UnknownCommand7Data data;
        break;
      case UnknownCommand12:
        UnknownCommand12Data data;
        break;
      case UnknownCommand14:
        break;
      case UnknownCommand16:
        break;
      case UnknownCommand20:
        break;
      case UnknownCommand22:
        break;
      case UnknownCommand56:
        break;
      case MoveCommand:
        MoveCommandData data;
        break;
      case CancelCommand:
        CancelCommandData data;
        break;
      case BuildCommand:
        BuildCommandData data;
        break;
      case UnknownCommand66:
        break;
      case UnknownCommand67:
        break;
      case UnknownCommand71:
        UnknownCommand71Data data;
        break;
      case UnknownCommand72:
        break;
      case UnknownCommand73:
        UnknownCommand73Data data;
        break;
      case UnknownCommand105:
        break;
      case UnknownCommand108:
        break;
      case UnknownCommand114:
        UnknownCommand114Data data;
        break;
      case UnknownCommand123:
        UnknownCommand123Data data;
        break;
      case UnknownCommand130:
        break;
      case UnknownCommand143:
        break;
      case PreCommand:
        PreCommandData data;
        break;
      case PostCommand:
        PostCommandData data;
        break;
      case PeriodicCommand1:
        PeriodicCommand1Data data;
        break;
      case PeriodicCommand2:
        PeriodicCommand2Data data;
        break;
      case UnknownCommand154:
        UnknownCommand154Data data;
        break;
      default:
        Printf("%xh: ReplayCommand new unknown commandType %u\r\n", FTell(), commandType);
        AddBookmark(startof(size), Str("CommandType %u", commandType), "ReplayCommand");
        break;
    }

    if (size > (FTell() - startof(size)))
        ubyte remainingCmdData[size + startof(size) - FTell()] <fgcolor=0x00ffff>;

    if (commandType == 152)
    {
        //printCamera(this);
    }

} ReplayCommand <read=formatReplayCommand>;

string GetPlayerNameForPlayerId(int id) {
    if (id == 0) {
      return "NoPlayer";
    }
    if (id < 1000 || id > 1007) {
      Printf("%xh: UnexpectedPlayerId %u expect 0 or {1000, ..., 1007}\r\n", FTell(), id);
      return "InvalidPlayer";
    }
    local int32 i, j;
    local string id_str;
    for (i = 0; i < file.rootNode.nodeCount; i++) {
      id_str = Str("%c%c%c%c", file.rootNode.node[i].id[0], file.rootNode.node[i].id[1], file.rootNode.node[i].id[2], file.rootNode.node[i].id[3]);
      if (id_str == "DATA") {
        for (j = 0; j < file.rootNode.node[i].dataGameSetup.playerCount; j++) {
          if (file.rootNode.node[i].dataGameSetup.players[j].playerId + 1000 == id) {
            return formatUString(file.rootNode.node[i].dataGameSetup.players[j].playerName);
          }
        }
      }
    }
    return "UnknownPlayer";
}

string formatReplayCommand(ReplayCommand &command) {
    return Str("PlayerId %u %s %s", command.playerId, GetPlayerNameForPlayerId(command.playerId), EnumToString(command.commandType));
};

void printCamera(ReplayCommand &command) {
    local string msg = "";
    local int32 i;
    for  (i = 0; i < 24; i++) {
        msg += Str(" %02X", command.pos.posData[i]);
    }

    local string msg2 = "";
    local int32 i2;
    for  (i2 = 0; i2 < 10; i2++) {
        msg2+= Str(" %02X", command.pos.pos.rotData[i2]);
    }

    //Printf("%06Xh: tick %4u %s [%08Xh] [%4u] - [%s] - [%6i %6i %6i] [%s] \r\n", startof(command), globalGameTick, formatTime(globalGameTick), command.unknown2, command.unknown6, msg, command.pos.pos.posA, command.pos.pos.posB, command.pos.pos.posC, msg2);
    //Printf("%06Xh: tick %4u [%08Xh] [%4u] - [%g %g %g] [%g %g %g]\r\n", startof(command), globalGameTick, command.unknown2, command.unknown6, command.posA, command.posB, command.posC, command.rotA, command.rotB, command.rotC);
};

typedef struct {
    // Human and AI have the same value on a local game. Each player has their own on multiplayer.
    // TODO: check this with multiple humans and multiple AIs in the same game.
    // Matches DataGameSetupPlayer.hostComputerId
    uint32 hostComputerId   <comment="Host computer this command originated from. One per human player.">; // Comment is a guess
    uint32 unknown1;
    uint32 size         <comment="Size of Block">;

    local int32 commandCount = 0;
    local uint32 posStart = FTell();
    while (size > (FTell() - posStart))
    {
        ReplayCommand commands;
        commandCount += 1;
    }
    //printReplayBlock(this);

    if (unknown1 != 0)  Printf("%xh: ReplayBlock.unknown1 expected 0 was %xh\r\n", startof(unknown1), unknown1);
    //if (unknown4 != 0)  Printf("%xh: ReplayBlock.unknown4 expected 0 was %xh\r\n", startof(unknown4), unknown4);
    //if (playerId != 0)  Printf("%xh: ReplayBlock.playerId expected 0 was %xh\r\n", startof(playerId), playerId);

    //if (unknown7[0] != 0)  Printf("%xh: ReplayBlock.unknown7[0] expected 0 was %xh\r\n", startof(unknown7[0]), unknown7[0]);
} ReplayBlock <read=formatReplayBlock>;

string formatReplayBlock(ReplayBlock &block) {
    return Str("HostComputer %u", block.hostComputerId);
};

void printReplayBlock(ReplayBlock &block) {
    //Printf("%Xh: [%u] [sz=%u] [sz2=%u] [k=%u] [rs=%lu] \r\n", startof(block), playerIndex, size, size2, unknown3, size - 7 * 4);
};

enum <uint32> RecordType {
    GameTick = 0,
    ChatMessage = 1
};

typedef struct {
    uint32 size         <comment="Size of All Blocks in game tick">;
    ubyte  unknown3     <comment="Always 0x20">; // version?
    uint32 gameTick     <fgcolor=0x7f7fff, comment="Number of the current game tick">;
    uint32 unknown4     <comment="Unknown, but maybe a game-state hash, which would be used to detect desyncs">;
    uint32 blockCount   <comment="The number of blocks in the game tick that come after this block">;

    globalGameTick = gameTick;

    if (blockCount)
        ReplayBlock blocks[blockCount] <optimize=false>;

    if (unknown3 != 0x20)   Printf("%xh: ReplayTickHeader.unknown3 expected 0x20 was %xh\r\n", startof(unknown3), unknown3);

} ReplayGameTick <read=formatReplayGameTick>;

string formatTime(uint32 tick) {
    local int32 min = (tick / (8*60));
    local float sec = (tick % (8*60)) / 8.0;
    
    return Str("%u:%06.3f", min, sec);
};

string formatReplayGameTick(ReplayGameTick &block) {
    string msg = Str("Game Tick %u - %s", block.gameTick, formatTime(block.gameTick));
    if (block.blockCount)
    {
        string cmds = "";
        local int32 i, j;
        for (i = 0; i < block.blockCount; i++)
        for  (j = 0; j < block.blocks[i].commandCount; j++) {
            if (cmds != "") cmds += ",";
            cmds += Str("%u", block.blocks[i].commands[j].commandType);
        }   
        msg += Str(" - (%u blocks - %s)", block.blockCount, cmds);
    }
    return msg;
};

// Weird part about chat messages:
// DonArtie sent a mode=8 message
// Beasty sent mode=2 'gg' followed by mode=5 'gg' a few gameticks later... obviously same message, but exists twice in the feed
// 8 = Received
// 2 = Sent
// 5 = Echo (Own censored msg)
typedef struct {
    uint32 size             <comment="Size of All Blocks in game tick">;
    uint32 type             <comment="Message Type 0 or 1, 1 = Chat Message, 0 = is something else">;
    uint32 messageSize      <comment="So far this is size - 8">;
    if (type == 0) {
        uint32 playerId     <comment="Player Id (100x)">;
        uint32 unknown4;
    } else if (type == 1) {
        uint32 unknown3     <comment="Message mode maybe, seen 2, 5, 8">;
        uint32 unknown4     <comment="Unknown, thought it was maybe chat color but it doesn't match">;
        uint32 unknown5     <comment="Always 0 so far">;
        UString playerName;
        UString message;
        if (unknown5 != 0)   Printf("%xh: ReplayChatMessage.unknown5 expected 0 was %xh\r\n", startof(unknown5), unknown5);
        return Str("Chat Msg[%u] %s: %s\r\n", unknown3, formatUStringShort(playerName), formatUStringShort(message));
    } else {
        Exit(0);
    }
} ReplayChatMessage <read=formatReplayChatMessage>;

string formatReplayChatMessage(ReplayChatMessage &block) {
    if (block.type == 1)
        return Str("Chat Msg[%u] %s: %s", block.unknown3, formatUStringShort(block.playerName), formatUStringShort(block.message));
    else
        return "";
};

void RemoveAllBookMarks() {
    while (GetNumBookmarks() > 0) {
      RemoveBookmark(0);
    }
}

typedef struct {
    RecordType type;
    if (type == 0)
        ReplayGameTick gameTick;
    else if (type == 1)
        ReplayChatMessage chatMessage;
    else {
        RemoveAllBookMarks(); // None of the others matter if this is wrong.
        AddBookmark(FTell(), "Unknown ReplayRecord type", "ubyte");
        Printf("%xh: Unknown Record Type %u\n", FTell(), type);
        Printf("This probably means the previous record consumed more bytes than it should have, and we're past the start of the next.\n");
        Exit(1);
    }
} ReplayRecord <read=formatReplayRecord>;

string formatReplayRecord(ReplayRecord &record) {
    if (record.type == 0)
        return formatReplayGameTick(record.gameTick);
    else if (record.type == 1)
        return formatReplayChatMessage(record.chatMessage);
    else
        return "";
};

struct ReplayStream {
    while (!FEof()) {
        ReplayRecord record;
    };
    
    local uint32 sizeRemaining = FileSize() - FTell();
    if (sizeRemaining) {
        Printf("%xh: ReplayStream remainder of %u bytes\r\n", FTell(), sizeRemaining);
	    byte remainder[sizeRemaining] <open=suppress, fgcolor=0x7070e0>;
    }
};

//------------------------------------------------

struct ChunkyNodePost;
struct ChunkyNode;

string GetChunkyNodeName(ChunkyNode &node) {
    return Str("%s:%s (ChunkyNode)", node.type, node.id);
};

string GetChunkyNodeValue(ChunkyNode &node) {
    if (node.type == "DATA") {
        //switch (node.id) {
		//};
    }
    return "";
};

typedef struct {
	char   type[4];
	char   id[4];
	uint32 version;

    ExpectVersion("ChunkyNodePost", version, 1);

	uint32 length;
	String name;
    local uint32 posStart = FTell();

	if (type == "FOLD") {
        while ((FTell()-posStart)<length) {
            ChunkyNodePost node;
        }
    } else if (type == "DATA") {
        switch (id) {
            case "DATA":
                uint32 unknown1;
                break;
		};
    }
		
    local uint32 sizeRemaining = length + posStart - FTell();
    if (sizeRemaining) {
        Printf("%xh: ChunkyNodePost remainder of %ul bytes\r\n", FTell(), sizeRemaining);
	    byte remainder[sizeRemaining] <open=suppress, fgcolor=0x7070e0>;
    }
}  ChunkyNodePost;


typedef struct {
	char   type[4];
	char   id[4];
	uint32 version;
	uint32 length;
	String name;
    local uint32 posStart = FTell();
    local uint32 nodeCount = 0;

	if (type == "FOLD") {
        ExpectVersion("ChunkyNode FOLD:", version, 5);
        while ((FTell()-posStart)<length) {
            ChunkyNode node;
            nodeCount += 1;
        }
    } else if (type == "DATA") {
        switch (id) {
            case "DATA":
                ExpectVersion("ChunkyNode DATA:DATA", version, 58);
                DataGameSetup dataGameSetup;
                break;
            case "PLAS":
                ExpectVersion("ChunkyNode DATA:PLAS", version, 1);
                DataPLAS dataPLAS;
                break;
            case "GRIF":
                ExpectVersion("ChunkyNode DATA:GRIF", version, 2);
                DataGRIF dataGRIF;
                break;
            case "SDSC":
                ExpectVersion("ChunkyNode DATA:SDSC", version, 3020);
                DataSDSC dataSDSC;
                break;
		};
    }
		
    local uint32 sizeRemaining = length + posStart - FTell();
    if (sizeRemaining) {
        Printf("%xh: ChunkyNode remainder of %ul bytes\r\n", FTell(), sizeRemaining);
	    byte remainder[sizeRemaining] <open=suppress, fgcolor=0x7070e0>;
    }
}  ChunkyNode <name=GetChunkyNodeName, read=GetChunkyNodeValue>;

struct ChunkyFileHeader {
	char   magic[16] <open=suppress>;
	uint32 version;
	uint32 platform;

    ExpectVersion("ChunkyFileHeader", version, 4);
};

struct ChunkyFilePost {
	ChunkyFileHeader header;
    ChunkyNodePost   rootNode <open=true>;
};

struct ChunkyFile {
	ChunkyFileHeader header;
    ChunkyNode       rootNode <open=true>;
};

struct ReplayFile {
    char    magic1[4];
    char    magic2[8];
    wchar_t date[32] <comment="This is the players local date format and timezone">;

    ChunkyFilePost postData;
    ChunkyFile replayData;
    ChunkyNode rootNode <open=true>;
    ReplayStream stream;
};

ReplayFile file <open=true>;

//6873